[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computational Publishing for Collections",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "hello.html",
    "href": "hello.html",
    "title": "3  Quarto Basics",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 3.1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'}\n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\nFigure 3.1: A line plot on a polar axis"
  },
  {
    "objectID": "computations.html#numpy",
    "href": "computations.html#numpy",
    "title": "4  Quarto Computations",
    "section": "4.1 NumPy",
    "text": "4.1 NumPy\n\nimport numpy as np\na = np.arange(15).reshape(3, 5)\na\n\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])"
  },
  {
    "objectID": "computations.html#matplotlib",
    "href": "computations.html#matplotlib",
    "title": "4  Quarto Computations",
    "section": "4.2 Matplotlib",
    "text": "4.2 Matplotlib\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)"
  },
  {
    "objectID": "computations.html#plotly",
    "href": "computations.html#plotly",
    "title": "4  Quarto Computations",
    "section": "4.3 Plotly",
    "text": "4.3 Plotly\n\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "lod_image.html#image-from-linked-open-data-api",
    "href": "lod_image.html#image-from-linked-open-data-api",
    "title": "5  Image from linked open data API",
    "section": "5.1 Image from linked open data API",
    "text": "5.1 Image from linked open data API\n\n5.1.1 Image - Siege III: The Fortress of Raab occupied by the Turks, 1594. Painting, https://wikibase.wbworkshop.tibwiki.io/wiki/Item:Q505\nThe below Python code experiments with retrieving data from Wikibase using the API. This takes approx. 18 seconds to run due to the size of the images.\n\nfrom PIL import Image\nimport requests\n\n# Global variables\nendpoint_url = 'https://wikibase.wbworkshop.tibwiki.io'\nresource_url = '/w/api.php'\nentity_id = 'Q505'\n\ndef get_entity (entity_id):\n    resourceUrl = '/w/api.php?action=wbgetentities&format=json&ids='+entity_id\n    uri = endpoint_url + resourceUrl\n    r = requests.get(uri)\n    data = r.json()\n    return data\n\nmedia_data = get_entity(entity_id)\nclaims = media_data['entities'][entity_id]['claims']\nfor property, values in claims.items():\n    if property == 'P22':\n        for value in values:\n            image_url = value['mainsnak']['datavalue']['value']\n            im = Image.open(requests.get(image_url, stream=True).raw)\n    elif property == 'P23':\n        for value in values:\n            entity_id = value['mainsnak']['datavalue']['value']['id']\n            object_data = get_entity(entity_id)\nprint('English title: ', object_data['entities'][entity_id]['labels']['en']['value'])\ndisplay(im)\n\nEnglish title:  Siege III: The Fortress of Raab occupied by the Turks, 1594"
  },
  {
    "objectID": "lod_query.html#sparql-query",
    "href": "lod_query.html#sparql-query",
    "title": "6  Linked open data query from SPARQL",
    "section": "6.1 SPARQL query",
    "text": "6.1 SPARQL query\nThe below Python code experiments with using SPARQLWrapper to retrieve data from NFDI4Culture’s Wikibase based on a SPARQL query.\n\nfrom SPARQLWrapper import SPARQLWrapper, JSON\nfrom PIL import Image\nfrom ipypublish import nb_setup\nimport numpy as np\nimport pandas\nimport requests\nimport sparql_dataframe\n\ndef get_delay(date):\n    try:\n        date = datetime.datetime.strptime(date, '%a, %d %b %Y %H:%M:%S GMT')\n        timeout = int((date - datetime.datetime.now()).total_seconds())\n    except ValueError:\n        timeout = int(date)\n    return timeout\n\ndef get_image(url, headers):\n    r = requests.get(url, headers=headers, stream=True)\n    if r.status_code == 200:\n        im = Image.open(r.raw)\n        return im\n    if r.status_code == 500:\n        return None\n    if r.status_code == 403:\n        return None\n    if r.status_code == 429:\n        timeout = get_delay(r.headers['retry-after'])\n        print('Timeout {} m {} s'.format(timeout // 60, timeout % 60))\n        time.sleep(timeout)\n        get_image(url, headers)\n\n# Example using NFDI4Culture Wikibase\n\n# Specify the NFDI4Culture Wikibase SPARQL endpoint\nendpoint_url = 'https://query.wbworkshop.tibwiki.io/proxy/wdqs/bigdata/namespace/wdq/sparql'\n\n# Query\nquery = \"\"\"\nSELECT ?item ?itemLabel ?creationDateStart ?creationDateEnd ?inscription ?materialLabel ?methodLabel ?description ?media\nWHERE { \n    ?item tibt:P25 tib:Q60.\n    ?item tibt:P79 ?creationDateStart.\n    ?item tibt:P80 ?creationDateEnd.\n    ?item tibt:P18 ?inscription.\n    ?item tibt:P38 ?material.\n    ?item tibt:P39 ?method.\n    ?item tibt:P26 ?description.\n    ?item tibt:P16 ?media\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n} \n#All paintings from \"Belagerungsszenen des Langen Türkenkriegs\"\n\"\"\"\n\ndataframe = sparql_dataframe.get(endpoint_url, query, post=True)\n\ndataframe\n\n# Example using Wikidata\n\n# Specify the Wikidata SPARQL endpoint\n#endpoint_url = 'https://query.wikidata.org/bigdata/namespace/wdq/sparql'\n\n#user_agent = 'cp4c_bot/0.0 (https://github.com/SimonXIX/cp4c; ad7588@coventry.ac.uk)'\n#sparql = SPARQLWrapper(endpoint_url, agent=user_agent)\n\n# query = \"\"\"\n# #Cats, with pictures\n# #defaultView:ImageGrid\n# SELECT ?item ?itemLabel ?pic\n# WHERE\n# {\n# ?item wdt:P31 wd:Q146 .\n# ?item wdt:P18 ?pic\n# SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n# }\n# LIMIT 2\n# \"\"\"\n\n# Retrieve results and convert to JSON format\n#sparql.setQuery(query)\n#sparql.setReturnFormat(JSON)\n#result = sparql.query().convert()\n\n#for item in result['results']['bindings']:\n    # image_url=item['pic']['value']\n    # headers = {'User-Agent': 'cp4c_bot/0.0 (https://github.com/SimonXIX/cp4c; ad7588@coventry.ac.uk)'}\n    # im = get_image(image_url, headers)\n\n    # print('Cat name: ', item['itemLabel']['value'])\n    # display(im)\n\n\n\n\n\n  \n    \n      \n      item\n      itemLabel\n      creationDateStart\n      creationDateEnd\n      inscription\n      materialLabel\n      methodLabel\n      description\n      media\n    \n  \n  \n    \n      0\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      Siege VII: The city of Waitzen occupied by the...\n      1602-01-01T00:00:00Z\n      1604-01-01T00:00:00Z\n      „Statt Waitzen wie die von vom Türcken beleger...\n      Canvas\n      Oil painting\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n    \n    \n      1\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      Siege I: The Fortress of Tottis retaken by the...\n      1602-01-01T00:00:00Z\n      1604-01-01T00:00:00Z\n      „Vestung Tottis, wie die von den Christen bei ...\n      Canvas\n      Oil painting\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n    \n    \n      2\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      Siege II: The Fortress of Gran occupied by the...\n      1602-01-01T00:00:00Z\n      1604-01-01T00:00:00Z\n      „Vestung Gran wie die von Christen belegert ge...\n      Canvas\n      Oil painting\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n    \n    \n      3\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      Siege XII: The Fortress of Gran occupied by th...\n      1602-01-01T00:00:00Z\n      1604-01-01T00:00:00Z\n      „Vestung Gran wie die vom Türcken belegert gew...\n      Canvas\n      Oil painting\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n    \n    \n      4\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      Siege XI: The capital city Offen occupied by t...\n      1602-01-01T00:00:00Z\n      1604-01-01T00:00:00Z\n      „Hauptstatt Offen, wie die von Christn beleger...\n      Canvas\n      Oil painting\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n    \n    \n      5\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      Siege III: The Fortress of Raab occupied by th...\n      1602-01-01T00:00:00Z\n      1604-01-01T00:00:00Z\n      „Vestung Raab, wie die vom Türcken belegert ge...\n      Canvas\n      Oil painting\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n    \n    \n      6\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      Siege IV: The Fortress of Comorna occupied by ...\n      1602-01-01T00:00:00Z\n      1604-01-01T00:00:00Z\n      „Vestung Comorna wie die vom Türckn belegert g...\n      Canvas\n      Oil painting\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n    \n    \n      7\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      Siege V: The Fortress of Gran retaken by the C...\n      1602-01-01T00:00:00Z\n      1604-01-01T00:00:00Z\n      „Vestung Gran wie die von den Christen wider e...\n      Canvas\n      Oil painting\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n    \n    \n      8\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      Siege VI: The Fortress of Vizzegrad occupied b...\n      1602-01-01T00:00:00Z\n      1604-01-01T00:00:00Z\n      “Vestung Vizzegrad wie die von Christen belege...\n      Canvas\n      Oil painting\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n    \n    \n      9\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      Siege VIII: The Fortress of Raab, which was re...\n      1602-01-01T00:00:00Z\n      1604-01-01T00:00:00Z\n      „Vestung Raab, die Christen beÿ der Nacht wide...\n      Canvas\n      Oil painting\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n    \n    \n      10\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      Siege IX: The capital city Offen occupied by t...\n      1602-01-01T00:00:00Z\n      1604-01-01T00:00:00Z\n      „Hauptstatt Offen. wie die von Christen belege...\n      Canvas\n      Oil painting\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n    \n    \n      11\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      Siege X: The capital city Offen occupied by th...\n      1602-01-01T00:00:00Z\n      1604-01-01T00:00:00Z\n      „Hauptstatt Offen, wie die von Christen belege...\n      Canvas\n      Oil painting\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      https://wikibase.wbworkshop.tibwiki.io/entity/..."
  },
  {
    "objectID": "model_with_annotations.html#d-model-with-annotations---httpswikibase.wbworkshop.tibwiki.iowikiitemq469",
    "href": "model_with_annotations.html#d-model-with-annotations---httpswikibase.wbworkshop.tibwiki.iowikiitemq469",
    "title": "7  3D model with annotations",
    "section": "7.1 3D model with annotations - https://wikibase.wbworkshop.tibwiki.io/wiki/Item:Q469",
<<<<<<< HEAD
    "text": "7.1 3D model with annotations - https://wikibase.wbworkshop.tibwiki.io/wiki/Item:Q469\nThis page shows a 3D model .obj file using the obj2html Python library found at https://z-uo.medium.com/visualize-3d-model-in-jupyter-notebook-e5a9deca20c6. This converts a .obj file to HTML and then displays the HTML.\nThis is currently using a 9.9 MB test model object because the dining room 3D model is 148.6 MB and is currently not working with this script.\n\n\nCode\nfrom obj2html import obj2html\nfrom IPython.display import display, HTML\n\nobj2html('model.obj', 'model.html')\n#obj2html('Tafelstube_Final_4_JL_US.obj', 'model.html')\n\ndisplay(HTML('model.html'))\n\n\n\n\n  \n    \n    \n\n    \n  \n  \n    \n  \n\n\n\nThe below code performs a SPARQL query to get the annotations for a specific target entity, in this case Q446 ‘Weikersheim, Dining room CAD model’ (https://wikibase.wbworkshop.tibwiki.io/wiki/Item:Q446).\nThe below code produces a QR code for this page.\n\n\nCode\nfrom PIL import Image\nimport qrcode\n\n# Link for website\ninput_data = \"https://nfdi4culture.github.io/cp4c/model_with_annotations.html\"\n\n#Creating an instance of qrcode\nqr = qrcode.QRCode(\n        version=1,\n        box_size=10,\n        border=5)\nqr.add_data(input_data)\nqr.make(fit=True)\nimg = qr.make_image(fill='black', back_color='white')\n\ndisplay(img)"
=======
    "text": "7.1 3D model with annotations - https://wikibase.wbworkshop.tibwiki.io/wiki/Item:Q469\nThis page shows a 3D model .obj file using the obj2html Python library found at https://z-uo.medium.com/visualize-3d-model-in-jupyter-notebook-e5a9deca20c6. This converts a .obj file to HTML and then displays the HTML.\nThis is currently using a 9.9 MB test model object because the dining room 3D model is 148.6 MB and is currently not working with this script.\n\nfrom obj2html import obj2html\nfrom IPython.display import display, HTML\n\nobj2html('model.obj', 'model.html')\n\n#obj2html('Tafelstube_Final_4_JL_US.obj', 'model.html')\ndisplay(HTML('model.html'))\n\n\n\n  \n    \n    \n\n    \n  \n  \n    \n  \n\n\n\nThe below code performs a SPARQL query to get the annotations for a specific target entity, in this case Q446 ‘Weikersheim, Dining room CAD model’ (https://wikibase.wbworkshop.tibwiki.io/wiki/Item:Q446).\n\nimport sparql_dataframe\n\n# Specify the NFDI4Culture Wikibase SPARQL endpoint\nendpoint_url = 'https://query.wbworkshop.tibwiki.io/proxy/wdqs/bigdata/namespace/wdq/sparql'\n\n# Query\nquery = \"\"\"\nSELECT ?annotation ?annotationLabel ?description ?title\nWHERE { \n    ?annotation tibt:P50 tib:Q446.\n    ?annotation schema:description ?description.\n    ?annotation tibt:P30 ?title\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n#All annotations for a specific target entity\"\n\"\"\"\n\ndataframe = sparql_dataframe.get(endpoint_url, query, post=True)\n\ndataframe\n\n\n\n\n\n  \n    \n      \n      annotation\n      annotationLabel\n      description\n      title\n    \n  \n  \n    \n      0\n      https://wikibase.wbworkshop.tibwiki.io/entity/...\n      The dining room\n      annotation for: Weikersheim, Tafelstube CAD Mo...\n      Die Tafelstube"
>>>>>>> 27efcc21395a8eb5c12800ef9c29ffb886a3da25
  },
  {
    "objectID": "video.html#video---developing-an-open-source-data-pipeline-for-participation-in-community-knowledge-bases---httpsav.tib.eumedia56162",
    "href": "video.html#video---developing-an-open-source-data-pipeline-for-participation-in-community-knowledge-bases---httpsav.tib.eumedia56162",
    "title": "8  Embedded video",
    "section": "8.1 Video - Developing an open source data pipeline for participation in community knowledge bases - https://av.tib.eu/media/56162",
    "text": "8.1 Video - Developing an open source data pipeline for participation in community knowledge bases - https://av.tib.eu/media/56162\nThe below Python code experiments with retrieving video data via iframe embedding.\n\nfrom IPython.display import HTML\nHTML(\"\"\"\n<iframe width=\"560\" height=\"315\" scrolling=\"no\" src=\"https://av.tib.eu/player/56162\" frameborder=\"0\" allowfullscreen></iframe>\n\"\"\")"
  },
  {
    "objectID": "linked_open_data_testing.html#linked-open-data-api-testing",
    "href": "linked_open_data_testing.html#linked-open-data-api-testing",
    "title": "9  Linked open data API testing",
    "section": "9.1 Linked open data API testing",
    "text": "9.1 Linked open data API testing\nThis notebook experiments with querying linked open data in a Jupyter Notebook rendered through Quarto.\nThe Python code below queries the NFDI4Culture Wikibase at https://wikibase.wbworkshop.tibwiki.io/wiki/Main_Page and returns data based on the ID inputted by the user.\nThis executes in Jupyter Notebook which is able to run the Python code and provides a static output when saved in the Notebook. It cannot be executed dynamically in Quarto since the Quarto front-end does not support stdin input requests.\nTo reset the output, run ‘Kernel > Restart kernel and clear all outputs’."
  },
  {
    "objectID": "linked_open_data_testing.html#wikibase-api-testing",
    "href": "linked_open_data_testing.html#wikibase-api-testing",
    "title": "9  Linked open data API testing",
    "section": "9.2 Wikibase API testing",
    "text": "9.2 Wikibase API testing\n\nimport requests\n\n# Global variables\nendpoint_url = 'https://wikibase.wbworkshop.tibwiki.io'\nresource_url = '/w/api.php'\n\nentity = input(\"What's the Q number (including the 'Q')? \")\nprint('Check out ' + endpoint_url + '/wiki/' + entity + ' to see the GUI.')\nresourceUrl = '/w/api.php?action=wbgetclaims&format=json&entity='+entity\nuri = endpoint_url + resourceUrl\nr = requests.get(uri)\ndata = r.json()\nclaims = data['claims']\nprint('subject: ', entity)\nprint()\nfor property, values in claims.items():\n    print('property: ', property)\n    for value in values:\n        try:\n            # print Q ID if the value is an item\n            print('item value: ', value['mainsnak']['datavalue']['value']['id'])\n        except:\n            try:\n                # print the string value if the value is a literal\n                print('literal value: ', value['mainsnak']['datavalue']['value'])\n            except:\n                # print the whole snak if the value is something else\n                print('other value: ', value['mainsnak'])\n    print()"
  },
  {
    "objectID": "orcid_get_works_by_person.html",
    "href": "orcid_get_works_by_person.html",
    "title": "10  Query ORCID for works authored by a person",
    "section": "",
    "text": "Taken from Project TAPIR’s repository of Jupyter Notebooks: https://github.com/Project-TAPIR/pidgraph-notebooks\nThis notebook queries the ORCID Public API to retrieve works listed in a person’s ORCID record. It takes an ORCID URL or iD as input to retrieve the ORCID record of a person and the works listed on it. From the resulting list of works we output all DOIs.\n\n# Prerequisites:\nimport requests                        # dependency to make HTTP calls\nfrom benedict import benedict          # dependency for dealing with json\n\nThe input for this notebook is an ORCID URL or iD, e.g. ‘https://orcid.org/0000-0003-2499-7741’ or ‘0000-0003-2499-7741’.\n\n# input parameter\nexample_orcid=\"https://orcid.org/0000-0002-2437-589X\"\n\nWe use it to query ORCID’s Public API for the person’s metadata and all works connected to them.\n\n# URL for ORCID API\nORCID_RECORD_API = \"https://pub.orcid.org/v3.0/\"\n\n# query ORCID for an ORCID record\ndef query_orcid_for_record(orcid_id):\n\n    response = requests.get(url=requests.utils.requote_uri(ORCID_RECORD_API + orcid_id),\n                          headers={'Accept': 'application/json'})\n    response.raise_for_status()\n    result=response.json()\n    return result\n\n\n#-- example execution\norcid_id=example_orcid.replace(\"https://orcid.org/\", \"\")\norcid_record=query_orcid_for_record(orcid_id)\n# uncomment next lines to see complete metadata for given ORCID\n#import pprint\n#pprint.pprint(orcid_record)\n\nFrom the complete ORCID metadata we extract the works section and print out title and DOI of each first work-summary (the first item in a personal information section has the highest display index).\nNote: works that do not have a DOI assigned, will not be printed.\n\n# extract works section from ORCID profile\ndef extract_works_section(orcid_record):\n    orcid_dict=benedict.from_json(orcid_record)\n    works=orcid_dict.get('activities-summary.works.group') or []\n    return works\n\n# for each work in the work section: extract title and DOI\ndef extract_doi(work):\n    work_dict=benedict.from_json(work)\n    title=work_dict.get('work-summary[0].title.title.value')\n    dois= [doi['external-id-value'] for doi in work_dict.get('work-summary[0].external-ids.external-id', []) if doi['external-id-type']==\"doi\"]\n    # if there is a DOI assigned to the work, the list of dois is not empty and we can extract the first one\n    doi=dois[0] if dois else None\n    return doi, title\n\n\n# ---- example execution\nworks=extract_works_section(orcid_record)\nfor work in works:\n    doi,title = extract_doi(work)\n    if doi:\n        print(f\"{doi}, {title}\")\n\n10.21428/785a6451.af466093, What is computational publishing?\n10.21428/785a6451.1792b84f, Books Contain Multitudes\n10.21428/785a6451.0ed93b68, Part 1: Mapping & Situating Experimental Books\n10.21428/785a6451.cd58a48e, Part 2: A Typology of Experimental Books\n10.21428/785a6451.c4d3ffa1, Introducing COPIM's new website\n10.17613/d4rs-rx03, Posthumanism in Outer Wilds\n10.17613/5SJE-W447, New Sincerity, the Weird, and the post-ironic turn in contemporary indie video games\n10.20944/preprints202001.0240.v1, Open or Ajar? Openness within the Neoliberal Academy"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  }
]